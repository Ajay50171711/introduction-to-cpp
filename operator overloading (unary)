#include <iostream>
using namespace std;

class Complex {
private:
    int real, imag;

public:
    Complex(int r, int i) : real(r), imag(i) {}

    // Overloading unary minus (-) operator
    Complex operator-() {
        return Complex(-real, -imag);
    }

    // Display function to show the complex number
    void display() const {
        cout << real << " + " << imag << "i" << endl;
    }
};

int main() {
    Complex c1(3, 4);
    Complex c2 = -c1; // Apply unary minus operator

    cout << "Original complex number: ";
    c1.display();

    cout << "After applying unary minus: ";
    c2.display();

    return 0;
}
Output:
Original complex number: 3 + 4i
After applying unary minus: -3 + -4i



Example 2: Overloading the Unary ++ (prefix increment) Operator

#include <iostream>
using namespace std;

class Counter {
private:
    int count;

public:
    Counter(int c = 0) : count(c) {}

    // Overloading unary increment operator (prefix)
    Counter& operator++() {
        ++count;
        return *this;
    }

    // Getter for count
    int getCount() const {
        return count;
    }
};

int main() {
    Counter c1(5);

    // Prefix increment
    ++c1;  // Calls operator++()

    cout << "After prefix increment: " << c1.getCount() << endl;

    return 0;
}




